---
title: On Redux/Elm/Cycle paradigms
tags: functional programming
---

A couple days [[https://twitter.com/andrestaltz][@andrestaltz]] published a tweet that was kind of a tough critic to the React/Redux ecosystem:

#+BEGIN_QUOTE
Due to force majeure, I’m building a React Native + Redux application for iOS. I’m trying to be open minded but React and Redux are bad.
#+END_QUOTE

followed by a blog post explaining what he means by /bad/: [[http://staltz.com/why-react-redux-is-an-inferior-paradigm.html][Why React/Redux is an inferior paradigm]].

I find the tone of the tweet not quite right because, and let me digress a little bit, we are all trying to do our best to improve our lives and become more productive in this rapid-evolving industry. I know we all have moments of rage and we damn the tool we are using and wish we *could have the time* to write it from the ground up *the right way* (I look at you Angular1.x, PHP) but I think that's just a lie, I believe such *right way* doesn't exist, the only right way I see is called /mathematics/ (that's why I'm an advocate of FP) and a lot of our industry bounce immediately when such "nonsense" is brought to discussion. So yes, unless you've proven that your solution is the right one, don't blame others for doing the same you do but with their own resources and influences. A lot of us are just implementing things devised thirty years ago, and since no one is born with all the knowledge in their heads, everything one does depend on what they stumble on with and what her influences
are, unless you're a Conal Elliot or a Robin Milner and yet they had their own influences.

On the other hand, I agree with André Staltz, I truly believe Cycle's paradigm is superior to even Elm's! at least as I see it and let me explain why, in Cycle you have an *intent* layer that is at a level of abstraction that's superior than React's or Elm's, take for example a form where you want to avoid a double-submission, since for handling the submission React/Elm just accept a callback, all the user intent you can express with it is if she submits or not that form, and in order to avoid the double-submission you need to keep state variables expressing that you're already submitting the form so any subsequent submission does nothing to the state that's going to be updated by the first submission when resolved. Now let's see Cycle, Cycle gives you the entire DOM driver upfront for you to express any complex user intent you wish and since the driver gives you streams of data, the double-submission can be avoided with just one line:

#+BEGIN_SRC js
  sources.DOM.select('form').events('submit').first()
#+END_SRC

That's the very reason I believe why Cycle is superior to React or Elm's (more concrete elm-html): I can express more, in a more concise way.

But everything isn't black or white, and for a project I working on I ended creating my own sort of Elm: [[https://github.com/kaleidos/olmo/][Olmo]], because I found composition to be very hard with Cycle and way more easy with Elm. Regarding React/Redux, well, I love pure functional languages although I'm not any expert, so I feel the same as André: *FUNCTIONAL BUT NOT REALLY*.

#+BEGIN_QUOTE
 ...there is no de-facto standard for I/O, effects, and async in the React/Redux community. The existing solutions are interesting and elegant in themselves, but the problem of I/O is systemic since React does not specify a clear interface/gate for effects coming in or going out. React.render for instance is an effect, but it’s not typically handled by such redux effects libraries...Placing async effects also often happens in some component’s componentDidMount, which is an ad-hoc solution, since components are often meant only for view concerns (markup)
#+END_QUOTE

All true, but hey, Redux is also great and has taken a strong step in the right direction, Dan Abramov has also put a lot of love and care in the software he's building so let's forget our ego for a moment and agree that that's just awesome, so kudos for you too Dan and keep up the hard work!
