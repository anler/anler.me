---
title: Command multiplexing in Emacs
---

** A little digression

I remember that when I switched to emacs, my Vim colleagues were constantly pointing out the strong point about Vim: modal editing. After some time using Emacs, I reply back: What the heck! Emacs has modal editing too! Emacs is a modal editor, any mode in emacs can denote the semantics of the keys at will, that's how you get so well integrated modes such as [[http://magit.vc/][Magit]].

** Multiplexing instead of overriding

But this post is not about changing the denotation of the keys, but multiplexing them, enters: [[https://github.com/yuutayamada/mykie-el][mykie]]. This package let's you attach additional functionality to the same keybinding very easily.

Let's see a real example in my [[https://github.com/anler/.emacs.d][.emacs.d]] configuration files.

I use =C-x k= to kill a buffer, and =C-c r= to rename it, now, whenever I prefix those keybindings with =C-u= I want them to switch functionaly and kill/rename a buffer and its file instead, this is how it is done with mykie:

#+BEGIN_SRC emacs-lisp
  (mykie:global-set-key "C-x k"
    :default kill-buffer
    :C-u     my-kill-buffer-and-file)

  (mykie:global-set-key "C-c r"
    :default rename-buffer
    :C-u     my-rename-buffer-and-file)
#+END_SRC

where =my-kill-buffer-and-file= and =my-rename-buffer-and-file= look like this:

#+BEGIN_SRC emacs-lisp
  (defun my-kill-buffer-and-file (&optional buffer-or-name)
    "Kill BUFFER-OR-NAME and its associated file.

  If BUFFER-OR-NAME is not specified the current buffer is used."
    (interactive
     (list (read-buffer (format "Kill buffer and its file (default %s): "
                                (buffer-name (current-buffer))))))
    (let* ((buffer (get-buffer buffer-or-name))
           (filename (buffer-file-name buffer)))
      (kill-buffer buffer)
      (delete-file filename)))

  (defun my-rename-buffer-and-file (newname newfilename)
    "Rename current buffer to NEWNAME and its file to NEWFILENAME.

  If NEWFILENAME already exists, ask user for confirmation, in case the user responds with no
  all renaming (buffer and file) is cancelled."
    (interactive
     (let* ((newname (read-string "Rename buffer (to new name): "))
            (newfilename (read-string "Rename file (to new name): " newname)))
       (list newname newfilename)))
    (let ((ask-if-exists 1))
      (rename-file (buffer-file-name) newfilename ask-if-exists)
      (set-visited-file-name newfilename :no-query :along-with-file)))
#+END_SRC

Clean and simple! I'm looking for more keybindings to easily augment, thanks to mykie.
