---
title: My Arch Linux setup
---

This week I've moved from Fedora to Arch Linux mainly because no matter how hard I try, developing with Gnome is several times less efficient than developing with tiling window managers such as i3wm or xmonad. But why should I switch distros completely? Well, because of yaourt, Fedora's copr looks promising but yaourt have everything I need at my fingertips, even the bluejeans firefox plugin I have to use for my daily meetings.

There were several things I wanted though that came out of the box with Fedora:

- Encrypted file-system
- Use LVM instead of traditional partitions

** Step by step guide

Note, these steps are specific to a UEFI + SSD system.

*** Partitions scheme

#+BEGIN_SRC sh :results output
  lsblk -f

  # NAME          FSTYPE      LABEL UUID                                   MOUNTPOINT
  # sda
  # ├─sda1        vfat              3961-4AA1
  # └─sda2        crypto_LUKS       8c52098c-8424-4530-b90b-396ecc4a047a
  #   └─lvm       LVM2_member       ggdKYK-ee4J-Bw7i-edAj-F1EW-7z4f-YBWGKg
  #     ├─vg-swap swap        swap  d360ba11-d47e-4def-be20-e875f8b11897
  #     └─vg-arch btrfs       arch  4cf75ed7-ab34-433b-9f52-b510ecdb632c   /
#+END_SRC

Where the btrfs volume is mapped as:

#+BEGIN_SRC sh
  btrfs subvolume list '/'

  # ID 257 gen 2111 top level 5 path @
  # ID 258 gen 7 top level 5 path @home
  # ID 259 gen 38 top level 5 path @log
  # ID 261 gen 40 top level 257 path var/lib/machines

  # that is,
  # | subvolume | mountpoint |
  # |-----------+------------|
  # | @         | /          |
  # | @home     | /home      |
  # | @log      | /var/log   |
#+END_SRC

*** Partitions

512MB EFI partition and LUKS container after that:

#+BEGIN_SRC text
# gdisk /dev/sda
o
n
<intro>
<intro>
+512M
ef00
n
<intro>
<intro>
<intro>
8300
w
#+END_SRC

Format EFI partition as FAT32, create crypto container, open it and setup lvm:
#+BEGIN_SRC sh
mkfs.vfat -F32 /dev/sda1
cryptsetup luksFormat /dev/sda2
cryptsetup luksOpen --allow-discards /dev/sda2 lvm
# create physical volume and volume group
pvcreate /dev/mapper/lvm
vgcreate vg /dev/mapper/lvm
# create swap and btrfs partitions
lvcreate -L 8G vg -n swap
lvcreate -l +100%FREE vg -n arch
# format partitions
mkfs.btrfs -L arch /dev/mapper/vg-arch
mkswap -L swap /dev/mapper/vg-swap
# mount btrfs volume
mount /dev/mapper/vg-arch /mnt
# add subvolumes
cd /mnt
btrfs subvolume create @
btrfs subvolume create @home
btrfs subvolume create @log
cd
umount /mnt
# mount everything
mount /dev/mapper/vg-arch /mnt -o subvol=@,discard,ssd,compress=lzo,autodefrag
mkdir -p /mnt/{home,var/log}
mount /dev/mapper/vg-arch /mnt/var/log -o subvol=@log,discard,ssd,compress=lzo,autodefrag
mount /dev/mapper/vg-arch /mnt/home -o subvol=@home,discard,ssd,compress=lzo,autodefrag
swapon -d /dev/mapper/vg-swap
#+END_SRC

*** Installation

#+BEGIN_SRC sh
pacstrap -i /mnt base base-devel zsh vim btrfs-progs dialog wpa_supplicant alsa-utils xorg-server xorg-server-utils xorg-xinit mesa xorg-twm xorg-xclock xterm xf86-video-intel
genfstab -U -p /mnt >> /mnt/etc/fstab
# change 'defaults' to 'defaults,discard' for the swap partition in fstab
arch-chroot /mnt
pacman -S grub efibootmgr
#+END_SRC

Add the following to `/etc/default/grub`:
#+BEGIN_SRC conf
GRUB_ENABLE_CRYPTODISK=y
GRUB_CMDLINE_LINUX="cryptdevice=/dev/sda2:lvm:allow-discards resume=/dev/mapper/vg-swap"
#+END_SRC

Install grub:
#+BEGIN_SRC sh
# install brub to harddrive
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=grub --recheck
#+END_SRC

Generate key and add it to LUKS:
#+BEGIN_SRC sh
dd bs=512 count=8 if=/dev/urandom of=/crypto_keyfile.bin
cryptsetup luksAddKey /dev/sda2 /crypto_keyfile.bin
chmod 000 /crypto_keyfile.bin
#+END_SRC

Merge the following to =/etc/mkinitcpio.conf=:
#+BEGIN_SRC text
MODULES="crc32c-intel"
HOOKS="... keyboard encrypt lvm2 resume filesystems ... fsck btrfs"
FILES="/crypto_keyfile.bin"
#+END_SRC

Generate initramfs:
#+BEGIN_SRC sh
mkinitcpio -p linux
#+END_SRC

Generate grub config:
#+BEGIN_SRC sh
grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

*** Configure system

#+BEGIN_SRC sh
echo "LANG=en_US.UTF-8\nLANGUAGE=en_US:en" > /etc/locale.conf
mv /etc/locale.gen{,.back}
echo "en_US.UTF-8 UTF-8\nes_ES.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
ln -s /usr/share/zoneinfo/Europe/Madrid /etc/localtime
echo allsafe > /etc/hostname
# configure network with dynamic IP
cp /etc/netctl/examples/ethernet-dhcp /etc/netctl
netctl enable ethernet-dhcp
# deactivate new udev naming scheme
ln -s /dev/null /etc/udev/rules.d/80-net-setup-link.rules
# add user
useradd -m -g users -G wheel -s /bin/zsh anler
passwd anler
#+END_SRC

Run =visudo= and uncomment =%wheel ALL=(ALL:ALL) ALL=.

Umount devices and reboot:
#+BEGIN_SRC sh
umount /mnt/var/log
umount /mnt/home
umount /mnt
swapoff /dev/mapper/vg-swap
cryptsetup luksClose /dev/mapper/lvm
reboot
#+END_SRC

* References

Everything I've done is taken from [[https://gist.github.com/XenGi/5429844][this tutorial]].
