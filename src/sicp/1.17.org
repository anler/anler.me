---
title: SICP: Exercise 1.17
---

The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the =expt= procedure:

#+BEGIN_SRC scheme
  (define (* a b)
    (if (= b 0)
        0
        (+ a (* a
                (- b 1)))))
#+END_SRC

This algorithm takes a number of steps that is linear in =b=. Now suppose we include, together with addition, operations =double=, which doubles an integer, and =halve=, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to =fast-expt= that uses a logarithmic number of steps.

* Solution

#+BEGIN_SRC haskell
  fastMult n t = fastMultIter n t a
    where a = 0

  fastMultIter n t a
    | t == 0 || n == 0 = a
    | even t = fastMultIter (double n) (halve t) a
    | odd  t = fastMultIter n (t-1) (n+a)


  double = (*2)
  halve = (`div`2)
#+END_SRC

=fastMultIter= generates an iterative recursive process that halves the size of the problem in every step on average, that's why it growths logarithmically.

Note: It could also have been solve using a recursive process, the iterative process is just better in space (constant).
