---
title: SICP: Exercise 1.18
---

Using the results of exercises 1.16 and 1.17, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.

Note: This algorithm is know as the *Russian peasant method* of multiplication.

* Solution

I've just solved this problem as /a plus/ of the previous one 1.17, here's the same solution.

#+BEGIN_SRC haskell
  fastMult n t = fastMultIter n t a
    where a = 0

  fastMultIter n t a
    | t == 0 || n == 0 = a
    | even t = fastMultIter (double n) (halve t) a
    | odd  t = fastMultIter n (t-1) (n+a)


  double = (*2)
  halve = (`div`2)
#+END_SRC
