---
title: SICP: Exercise 1.16
---

Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does =fast-expt=.

Hint: Using the observation that

\begin{equation}
(b^\frac{n}{2})^2 = (b^2)^\frac{n}{2}
\end{equation}

, keep, along with the exponent =n= and the base =b=, an additional state variable =a=, and define the state transformation in such a way that the product

\begin{equation}
ab^n
\end{equation}

is unchanged from state to state. At the beginning of the process =a= is taken to be 1, and the answer is given by the value of =a= at the end of the process. In general, the technique of defining an /invariant quantity/ that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.

* Solution

#+BEGIN_SRC haskell
  exp b n = expIter b n a
    where a = 1

  expIter b n a
    | n == 0 = a
    | even n = expIter (b*b) (n`div`2) a
    | odd n = expIter b (pred n) b*a
#+END_SRC

The important step is when evaluating =expIter= for even numbers that we need to calculate the exponentiation of a new ~b'~ which is ~b' = b * b~ in order to keep the invariant rule.
