---
title: SICP: Exercise 1.10
---

The following procedure computes a mathematical function called Achermann's function.

#+BEGIN_SRC scheme
  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x
                      (- y 1))))))
#+END_SRC

What are the values of the following expressions?

#+BEGIN_SRC scheme
  (A 1 10)
  (A 2 4)
  (A 3 3)
#+END_SRC

Consider the following procedures, where ~A~ is the procedure defined above:

#+BEGIN_SRC scheme
  (define (f n) (A 0 n))

  (define (g n) (A 1 n))

  (define (h n) (A 2 n))

  (define (k n) (* 5 n n))
#+END_SRC

Give concise mathematical definitions for the functions computed by the procedures =f=, =g=, and =h= for positive integer values of =n=. For example, =(k, n)= computes =5*n^2=.

* Solution

This is the Ackermann function defined in Haskell:
#+BEGIN_SRC haskell
  acker x y | y == 0 = 0
            | x == 0 = 2*y
            | y == 1 = 2
            | otherwise = acker x' (acker x y')
    where x' = pred x
          y' = pred y
#+END_SRC

This is the process generated by the expression =(A 1 10)=:
#+BEGIN_SRC scheme
  (A 1 10)
  (A 0 (A 1 9))
  (A 0 (A 0 (A 1 8)))
  (A 0 (A 0 (A 0 (A 1 7))))
  (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
  (A 0 (A 0 (A 0 (A 0 64))))
  (A 0 (A 0 (A 0 128)))
  (A 0 (A 0 256))
  (A 0 512)
  1024
#+END_SRC

This is the process generated by the expression =(A 2 4)=:
#+BEGIN_SRC scheme
  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (A 0 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 2))))
  (A 1 (A 0 (A 0 4)))
  (A 1 (A 0 8))
  (A 1 16)
  (A 0 (A 1 15))
  (A 0 (A 0 (A 1 14)))
  (A 0 (A 0 (A 0 (A 1 13))))
  (A 0 (A 0 (A 0 (A 0 (A 1 12)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6)))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 2048)))))
  (A 0 (A 0 (A 0 (A 0 4096))))
  (A 0 (A 0 (A 0 8192)))
  (A 0 (A 0 16384))
  (A 0 32768)
  65536
#+END_SRC

This is the process generated by the expression =(A 3 3)=:
#+BEGIN_SRC scheme
  (A 3 3)
  (A 2 (A 3 2))
  (A 2 (A 2 (A 3 1)))
  (A 2 (A 2 2))
  (A 2 (A 1 (A 2 1)))
  (A 2 (A 1 2))
  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (A 0 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 2))))
  (A 1 (A 0 (A 0 4)))
  (A 1 (A 0 8))
  (A 1 16)
  (A 0 (A 1 15))
  (A 0 (A 0 (A 1 14)))
  (A 0 (A 0 (A 0 (A 1 13))))
  (A 0 (A 0 (A 0 (A 0 (A 1 12)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6)))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 2048)))))
  (A 0 (A 0 (A 0 (A 0 4096))))
  (A 0 (A 0 (A 0 8192)))
  (A 0 (A 0 16384))
  (A 0 32768)
  65536
#+END_SRC

The function computed by the =f= procedure (~f n = A 0 n~) is:
\begin{equation}
f(x) = 2x
\end{equation}

which in haskell is defined as:
#+BEGIN_SRC haskell
  f = (2*)
#+END_SRC

The function computed by the =g= procedure (~g n = A 1 n~) is:
\begin{equation}
g(x) = 2^x
\end{equation}

which in haskell is defined as:
#+BEGIN_SRC haskell
  g = (2^)
#+END_SRC

The function computed by the =h= procedure (~h n = A 2 n~) is:

\begin{equation}
h(x)=\begin{cases}2 &\mbox{if } x = 1\\2^{h(x - 1)} &\mbox{if } n > 1\end{cases}
\end{equation}

which in haskell is defined as:
#+BEGIN_SRC haskell
  h 1 = 2
  h n = 2^(h n')
    where n' = pred n
#+END_SRC
